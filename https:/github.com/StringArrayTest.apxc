public class StringArrayTest {
    /* Challenge solution for Trailhead module "Get Started with Apex".
     * Create an Apex class with a method that returns a list of strings.
Create an Apex class with a method that returns a list of formatted strings. 
The length of the list is determined by an integer parameter. You can also use an array if you prefer, but these instructions assume youâ€™re using a list.
The Apex class must be called StringArrayTest and be in the public scope.
The Apex class must have a public static method called generateStringArray
The generateStringArray method must return a list of strings
The method must accept an incoming Integer as a parameter, which will be used to determine the number of returned strings
The method must return a list of strings. Each element in the list must have the format Test n, where n is the index of the current string in the list. 
For example, if the input is 3, then the output should be ['Test 0', 'Test 1', 'Test 2'].
Remember that in Apex, the index position of the first element in a list is always 0.
*/

    public static List<String> generateStringArray(Integer n) {
        List<String> TestList = new List<String>();
        for(Integer i=0;i<n;i++) {
            TestList.add('Test ' + i);
            System.debug(TestList[i]);
        }
/* Another way of doing a loop
        Integer i = 0;
        while (i < n) {
            TestList.add('Test ' + i);
            System.debug(TestList[i]);
            i++;
        }
*/
    return TestList;
    }
}
/*

public static List generateStringArray (Integer n) {
List stList = new List();
for (Integer i=0; i<n; i++) {
stList.add('Test ' + i);
}
return stList;
}

//Execute Anonymous code to call the class above

StringArrayTest.generateStringArray(Enter the value of i );
*/

/* 
    public static List<string> generateStringArray(Integer n)
    {
        List<String> myArray = new List<String>();
        
        for(Integer i=0;i<n;i++)
        {
            myArray.add('Test'+i);
            System.debug(myArray[i]);
        }
        return myArray;
        
*/
